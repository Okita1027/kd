import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-CBhQlLrf.js";const e={};function p(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p><a href="./%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAWPF.pdf">电子书：深入浅出WPF</a></p><h2 id="控件父类" tabindex="-1"><a class="header-anchor" href="#控件父类"><span>控件父类</span></a></h2><h3 id="dispatcherobject" tabindex="-1"><a class="header-anchor" href="#dispatcherobject"><span>DispatcherObject</span></a></h3><h3 id="dependencyobject" tabindex="-1"><a class="header-anchor" href="#dependencyobject"><span>DependencyObject</span></a></h3><h3 id="visual" tabindex="-1"><a class="header-anchor" href="#visual"><span>Visual</span></a></h3><h3 id="uielement" tabindex="-1"><a class="header-anchor" href="#uielement"><span>UIElement</span></a></h3><h3 id="frameworkelement" tabindex="-1"><a class="header-anchor" href="#frameworkelement"><span>FrameworkElement</span></a></h3><h2 id="布局控件" tabindex="-1"><a class="header-anchor" href="#布局控件"><span>布局控件</span></a></h2><h3 id="panel基类" tabindex="-1"><a class="header-anchor" href="#panel基类"><span>Panel基类</span></a></h3><h3 id="grid网格" tabindex="-1"><a class="header-anchor" href="#grid网格"><span>Grid网格</span></a></h3><h3 id="uniformgrid均分" tabindex="-1"><a class="header-anchor" href="#uniformgrid均分"><span>UniformGrid均分</span></a></h3><h3 id="stackpanel栈式" tabindex="-1"><a class="header-anchor" href="#stackpanel栈式"><span>StackPanel栈式</span></a></h3><h3 id="wrappanel瀑布流" tabindex="-1"><a class="header-anchor" href="#wrappanel瀑布流"><span>WrapPanel瀑布流</span></a></h3><h3 id="dockpanel停靠" tabindex="-1"><a class="header-anchor" href="#dockpanel停靠"><span>DockPanel停靠</span></a></h3><p>DockPanel是WPF中的一种布局控件，它允许子元素沿着面板的边缘停靠（停靠布局）。</p><p><strong>基本用法：</strong></p><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Top&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;顶部按钮&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Bottom&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;底部按钮&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Left&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;左侧按钮&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Right&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;右侧按钮&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;中心内容&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 第一个元素：停靠到顶部，占据整个顶部区域 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Top&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;50&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Background</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Red&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 第二个元素：停靠到底部，占据剩余区域的底部 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Bottom&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;50&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Background</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Blue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 第三个元素：停靠到左侧，占据剩余区域的左侧 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Left&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;100&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Background</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Green&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 第四个元素：停靠到右侧，占据剩余区域的右侧 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Right&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;100&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Background</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Yellow&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 最后一个元素：填充剩余的中心区域 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Background</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Purple&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>角落由谁决定</strong>：</p><p>结论：谁先声明谁决定</p><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Top&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;50&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;外层顶部&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Left&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;100&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;外层左侧&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+---------------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|        顶部区域           |  ← 第一个声明，停靠到顶部</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+-----+---------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 左  |                     |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 侧  |    剩余内容区域      |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 区  |                     |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 域  |                     |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+-----+---------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若调换声明的顺序</p><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Left&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;100&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;外层左侧&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Top&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;50&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;外层顶部&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Border</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+-----+---------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 左  |      顶部区域        |  ← 第一个声明，停靠到左侧</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 侧  +---------------------+</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 区  |                     |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">| 域  |    剩余内容区域      |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|     |                     |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+-----+---------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>相关属性</strong>：</p><ul><li>LastChildFill</li></ul><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> LastChildFill</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;True&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    &lt;!-- 默认为True，最后一个子元素填充剩余空间 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>嵌套Dock</li></ul><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Left&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;200&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        &lt;!-- 左侧区域可以有自己的停靠布局 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DockPanel.Dock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Top&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> Height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;30&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;左侧顶部&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ListBox</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;左侧列表&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ListBox</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;主内容区域&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DockPanel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="canvas绝对" tabindex="-1"><a class="header-anchor" href="#canvas绝对"><span>Canvas绝对</span></a></h3><h3 id="border边框" tabindex="-1"><a class="header-anchor" href="#border边框"><span>Border边框</span></a></h3><h2 id="内容控件" tabindex="-1"><a class="header-anchor" href="#内容控件"><span>内容控件</span></a></h2><h2 id="集合控件" tabindex="-1"><a class="header-anchor" href="#集合控件"><span>集合控件</span></a></h2><h2 id="图形控件" tabindex="-1"><a class="header-anchor" href="#图形控件"><span>图形控件</span></a></h2><h2 id="数据绑定" tabindex="-1"><a class="header-anchor" href="#数据绑定"><span>数据绑定</span></a></h2><div class="language-mathematica line-numbers-mode" data-highlighter="shiki" data-ext="mathematica" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mathematica"><span class="line"><span>📌 WPF 数据绑定 Data Binding</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 1. 绑定的基本元素</span></span>
<span class="line"><span>│     ├── 目标（Target）→ UI 控件的属性（TextBox.Text）</span></span>
<span class="line"><span>│     ├── 源（Source）→ 数据对象（Person.Name）</span></span>
<span class="line"><span>│     ├── 路径（Path）→ 属性名（&quot;Name&quot;）</span></span>
<span class="line"><span>│     └── 模式（Mode）</span></span>
<span class="line"><span>│           ├── OneTime       → 源 → 目标（一次性）</span></span>
<span class="line"><span>│           ├── OneWay        → 源 → 目标（实时）</span></span>
<span class="line"><span>│           ├── TwoWay        → 源 ↔ 目标（双向）</span></span>
<span class="line"><span>│           ├── OneWayToSource→ 目标 → 源</span></span>
<span class="line"><span>│           └── Default       → 控件默认绑定模式</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 2. 数据源类型（Source）</span></span>
<span class="line"><span>│     ├── 普通对象（POCO）</span></span>
<span class="line"><span>│     ├── 集合（ObservableCollection&lt;T&gt;）</span></span>
<span class="line"><span>│     ├── 另一个控件（ElementName）</span></span>
<span class="line"><span>│     ├── 静态资源（StaticResource / x:Static）</span></span>
<span class="line"><span>│     ├── RelativeSource（绑定到父级控件）</span></span>
<span class="line"><span>│     └── 依赖属性（DependencyProperty）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 3. 数据更新机制</span></span>
<span class="line"><span>│     ├── 单个属性更新 → INotifyPropertyChanged</span></span>
<span class="line"><span>│     └── 集合更新     → ObservableCollection&lt;T&gt;</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 4. 高级绑定技巧</span></span>
<span class="line"><span>│     ├── 值转换（IValueConverter / IMultiValueConverter）</span></span>
<span class="line"><span>│     ├── 多重绑定（MultiBinding）</span></span>
<span class="line"><span>│     ├── 优先级绑定（PriorityBinding）</span></span>
<span class="line"><span>│     ├── 数据校验（Validation Rules / IDataErrorInfo）</span></span>
<span class="line"><span>│     └── 异步绑定（IsAsync=True）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 5. DataContext</span></span>
<span class="line"><span>│     ├── 控件的 DataContext（决定绑定源是谁）</span></span>
<span class="line"><span>│     ├── 继承机制（子控件会继承父控件的 DataContext）</span></span>
<span class="line"><span>│     └── 常用设置方式</span></span>
<span class="line"><span>│           ├── XAML 静态绑定（StaticResource）</span></span>
<span class="line"><span>│           └── 代码动态设置（this.DataContext = obj）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── 6. MVVM 模式中的绑定</span></span>
<span class="line"><span>      ├── ViewModel 作为 DataContext</span></span>
<span class="line"><span>      ├── 属性更新通知（INotifyPropertyChanged）</span></span>
<span class="line"><span>      ├── 命令绑定（ICommand + Button.Command）</span></span>
<span class="line"><span>      └── 集合绑定（ItemsControl.ItemsSource）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="样式" tabindex="-1"><a class="header-anchor" href="#样式"><span>样式</span></a></h2><div class="language-mathematica line-numbers-mode" data-highlighter="shiki" data-ext="mathematica" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mathematica"><span class="line"><span>📌 WPF 样式（Style）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 1. 样式的作用</span></span>
<span class="line"><span>│     ├── 统一控件外观（替代重复的属性设置）</span></span>
<span class="line"><span>│     ├── 主题化 UI（暗色 / 浅色主题切换）</span></span>
<span class="line"><span>│     └── 支持动态切换（DynamicResource）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 2. 样式的基本结构</span></span>
<span class="line"><span>│     ├── TargetType（目标控件类型）</span></span>
<span class="line"><span>│     ├── Setters（属性赋值）</span></span>
<span class="line"><span>│     └── Triggers（触发器，条件改变样式）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 3. 样式的分类</span></span>
<span class="line"><span>│     ├── 显式样式（有 x:Key，手动引用）</span></span>
<span class="line"><span>│     ├── 隐式样式（无 x:Key，自动应用到指定类型控件）</span></span>
<span class="line"><span>│     └── 基于样式（BasedOn，样式继承）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 4. 样式的作用域</span></span>
<span class="line"><span>│     ├── 控件内部（直接定义在控件.Resources）</span></span>
<span class="line"><span>│     ├── 窗口级（Window.Resources）</span></span>
<span class="line"><span>│     ├── 应用级（App.xaml → Application.Resources）</span></span>
<span class="line"><span>│     └── 外部资源字典（ResourceDictionary）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 5. 触发器（Triggers）</span></span>
<span class="line"><span>│     ├── 属性触发器（PropertyTrigger）</span></span>
<span class="line"><span>│     ├── 数据触发器（DataTrigger）</span></span>
<span class="line"><span>│     ├── 多条件触发器（MultiTrigger / MultiDataTrigger）</span></span>
<span class="line"><span>│     └── 事件触发器（EventTrigger）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 6. 样式与模板</span></span>
<span class="line"><span>│     ├── ControlTemplate（控件外观重定义）</span></span>
<span class="line"><span>│     ├── DataTemplate（数据呈现方式）</span></span>
<span class="line"><span>│     └── ItemTemplate（列表数据项样式）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 7. 动态样式</span></span>
<span class="line"><span>│     ├── StaticResource（静态资源，加载时固定）</span></span>
<span class="line"><span>│     ├── DynamicResource（动态资源，运行时可切换）</span></span>
<span class="line"><span>│     └── 主题切换（换 ResourceDictionary）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── 8. 高级技巧</span></span>
<span class="line"><span>      ├── 基于主题的资源字典（Light.xaml / Dark.xaml）</span></span>
<span class="line"><span>      ├── 样式合并（MergedDictionaries）</span></span>
<span class="line"><span>      ├── 结合绑定（在 Setter 中用 Binding）</span></span>
<span class="line"><span>      └── 与附加属性配合（自定义控件扩展样式）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板" tabindex="-1"><a class="header-anchor" href="#模板"><span>模板</span></a></h2><p><strong>WPF 模板（Template）</strong>，它和样式（Style）关系密切，但功能更强，直接决定了控件<strong>长什么样、内部结构怎么组成</strong>。</p><div class="language-mathematica line-numbers-mode" data-highlighter="shiki" data-ext="mathematica" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mathematica"><span class="line"><span>📌 WPF 模板（Template）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 1. 模板的作用</span></span>
<span class="line"><span>│     ├── 重定义控件的外观（UI结构）</span></span>
<span class="line"><span>│     ├── 将数据与UI分离（可复用）</span></span>
<span class="line"><span>│     ├── 允许主题/皮肤替换</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 2. 模板类型</span></span>
<span class="line"><span>│     ├── ControlTemplate —— 控件外观定义</span></span>
<span class="line"><span>│     │       🎯 改变控件结构和视觉表现（按钮、文本框等）</span></span>
<span class="line"><span>│     │       📌 常与 Style 配合使用</span></span>
<span class="line"><span>│     │       📌 关键点：</span></span>
<span class="line"><span>│     │           - TargetType 指定控件类型</span></span>
<span class="line"><span>│     │           - VisualTree 定义控件的可视树</span></span>
<span class="line"><span>│     │           - TemplateBinding 绑定控件属性</span></span>
<span class="line"><span>│     │           - Triggers 处理状态变化</span></span>
<span class="line"><span>│     │</span></span>
<span class="line"><span>│     ├── DataTemplate —— 数据到 UI 的映射</span></span>
<span class="line"><span>│     │       🎯 定义数据项如何显示</span></span>
<span class="line"><span>│     │       📌 常用于 ListBox、ListView、ComboBox</span></span>
<span class="line"><span>│     │       📌 关键点：</span></span>
<span class="line"><span>│     │           - 绑定到数据属性（{Binding Name}）</span></span>
<span class="line"><span>│     │           - 可嵌套布局和其他控件</span></span>
<span class="line"><span>│     │</span></span>
<span class="line"><span>│     ├── HierarchicalDataTemplate —— 分层数据模板</span></span>
<span class="line"><span>│     │       🎯 树形结构展示（TreeView）</span></span>
<span class="line"><span>│     │       📌 ItemsSource 绑定子集合</span></span>
<span class="line"><span>│     │</span></span>
<span class="line"><span>│     └── ItemsPanelTemplate —— 定义容器布局</span></span>
<span class="line"><span>│             🎯 指定 ItemsControl 的内部布局面板</span></span>
<span class="line"><span>│             📌 例如：ListBox 默认 StackPanel，可改为 WrapPanel/Grid</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 3. 模板关键技术</span></span>
<span class="line"><span>│     ├── TemplateBinding —— 将模板元素属性绑定到控件属性</span></span>
<span class="line"><span>│     ├── ContentPresenter —— 占位符，显示控件的 Content</span></span>
<span class="line"><span>│     ├── ItemsPresenter —— 占位符，显示 ItemsControl 的子项</span></span>
<span class="line"><span>│     └── PART_xxx 命名约定（自定义控件必备的模板部件）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 4. 模板与样式的关系</span></span>
<span class="line"><span>│     ├── 样式（Style）可以包含模板</span></span>
<span class="line"><span>│     ├── 样式修改外观的简单场景（Setter）</span></span>
<span class="line"><span>│     └── 模板用于完全重绘控件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 5. 模板触发器</span></span>
<span class="line"><span>│     ├── Trigger（属性触发）</span></span>
<span class="line"><span>│     ├── DataTrigger（绑定数据触发）</span></span>
<span class="line"><span>│     └── EventTrigger（事件触发）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── 6. 高级用法</span></span>
<span class="line"><span>      ├── 动态加载模板（DynamicResource）</span></span>
<span class="line"><span>      ├── 基于主题切换模板</span></span>
<span class="line"><span>      ├── 多模板切换（DataTemplateSelector）</span></span>
<span class="line"><span>      └── 自定义控件与默认模板（Generic.xaml）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span>命令</span></a></h2><p><strong>WPF 命令（Command）</strong>，它是 MVVM 模式的核心之一，能把 <strong>用户操作</strong> 和 <strong>执行逻辑</strong> 解耦，让代码更干净。</p><div class="language-mathematica line-numbers-mode" data-highlighter="shiki" data-ext="mathematica" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-mathematica"><span class="line"><span>📌 WPF 命令系统</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 1. 命令的作用</span></span>
<span class="line"><span>│     ├── 解耦 UI 和业务逻辑（不用在事件里写逻辑）</span></span>
<span class="line"><span>│     ├── 支持命令状态（能否执行）</span></span>
<span class="line"><span>│     ├── 支持键盘快捷键、菜单、工具栏统一触发</span></span>
<span class="line"><span>│     ├── MVVM 模式下 View 和 ViewModel 的桥梁</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 2. 命令的分类</span></span>
<span class="line"><span>│     ├── 预定义命令（RoutedCommand）</span></span>
<span class="line"><span>│     │       📌 ApplicationCommands（Copy、Paste、Undo…）</span></span>
<span class="line"><span>│     │       📌 NavigationCommands（BrowseBack、BrowseForward…）</span></span>
<span class="line"><span>│     │       📌 MediaCommands（Play、Pause…）</span></span>
<span class="line"><span>│     │       📌 EditingCommands（Bold、Italic…）</span></span>
<span class="line"><span>│     │</span></span>
<span class="line"><span>│     ├── 自定义命令</span></span>
<span class="line"><span>│     │       📌 RoutedCommand（UI 路由命令）</span></span>
<span class="line"><span>│     │       📌 ICommand（MVVM 自定义）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 3. 核心接口</span></span>
<span class="line"><span>│     ├── ICommand</span></span>
<span class="line"><span>│     │       - Execute(object parameter)       👉 执行命令</span></span>
<span class="line"><span>│     │       - CanExecute(object parameter)    👉 命令是否可执行</span></span>
<span class="line"><span>│     │       - CanExecuteChanged 事件          👉 通知 UI 更新状态</span></span>
<span class="line"><span>│     │</span></span>
<span class="line"><span>│     ├── RoutedCommand</span></span>
<span class="line"><span>│     │       - 有命令路由（冒泡、隧道）</span></span>
<span class="line"><span>│     │       - 常用于多层 UI 控件间传递</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 4. 命令绑定</span></span>
<span class="line"><span>│     ├── Command（按钮绑定命令）</span></span>
<span class="line"><span>│     ├── CommandParameter（传递参数）</span></span>
<span class="line"><span>│     ├── CommandTarget（指定命令作用对象）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 5. 常见实现方式</span></span>
<span class="line"><span>│     ├── 事件绑定命令（CommandBinding）</span></span>
<span class="line"><span>│     │       - 适用于 Code-behind</span></span>
<span class="line"><span>│     │</span></span>
<span class="line"><span>│     ├── MVVM RelayCommand（DelegateCommand）</span></span>
<span class="line"><span>│     │       - ViewModel 中用委托实现 ICommand</span></span>
<span class="line"><span>│     │</span></span>
<span class="line"><span>│     ├── Prism DelegateCommand / ReactiveCommand</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── 6. 命令路由机制（RoutedCommand）</span></span>
<span class="line"><span>│     ├── 事件路由模式（Bubble / Tunnel / Direct）</span></span>
<span class="line"><span>│     ├── 从触发控件开始向上传递，直到被处理</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── 7. 高级技巧</span></span>
<span class="line"><span>      ├── 动态更新 CanExecute（调用 CommandManager.InvalidateRequerySuggested）</span></span>
<span class="line"><span>      ├── 命令参数绑定（CommandParameter 绑定 SelectedItem、Text 等）</span></span>
<span class="line"><span>      ├── 多命令合并执行</span></span>
<span class="line"><span>      └── 异步命令（防止 UI 卡顿）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖属性" tabindex="-1"><a class="header-anchor" href="#依赖属性"><span>依赖属性</span></a></h2><p><strong>依赖属性</strong> 是继承自 <code>DependencyObject</code> 的类通过 WPF 属性系统注册的特殊属性， 它比普通 .NET 属性（CLR 属性）多了很多“附加能力”：</p><ul><li>🔄 <strong>支持数据绑定</strong>（Binding）</li><li>🎨 <strong>支持样式（Style）和模板（Template）自动应用值</strong></li><li>🎬 <strong>支持动画（Animation）</strong></li><li>🛠 <strong>支持属性值继承（Property Value Inheritance）</strong></li><li>🚀 <strong>支持高性能的属性存储（内部用稀疏存储，节省内存）</strong></li><li>📝 <strong>支持验证、回调、强制 Coerce 值</strong></li></ul><p>依赖属性不是普通字段存储的值，而是存储在 <strong>WPF 属性系统的依赖属性存储表</strong> 中。 它有一个全局唯一的 <strong>DependencyProperty 标识符</strong>（<code>xxxProperty</code>），WPF 用它来查找和设置值。</p><table><thead><tr><th>特性</th><th>CLR 属性</th><th>依赖属性</th></tr></thead><tbody><tr><td>数据绑定</td><td>❌ 不支持</td><td>✅ 支持</td></tr><tr><td>样式/动画</td><td>❌ 不支持</td><td>✅ 支持</td></tr><tr><td>属性值继承</td><td>❌ 不支持</td><td>✅ 支持</td></tr><tr><td>内存占用</td><td>固定字段</td><td>稀疏存储（节省内存）</td></tr><tr><td>值验证/回调</td><td>手动实现</td><td>元数据内置支持</td></tr></tbody></table><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><h4 id="定义dependencyproperty标识符" tabindex="-1"><a class="header-anchor" href="#定义dependencyproperty标识符"><span>定义DependencyProperty标识符</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cs"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DependencyProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> TitleProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    DependencyProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Register</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;Title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 属性名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),                </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 属性类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MainWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 所属类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PropertyMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 元数据（默认值、回调等）</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;默认标题&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            OnTitleChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 属性值变化回调</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            CoerceTitle</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // 强制值回调（可选）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义clr包装器" tabindex="-1"><a class="header-anchor" href="#定义clr包装器"><span>定义CLR包装器</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cs"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Title</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">TitleProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SetValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">TitleProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可选回调方法" tabindex="-1"><a class="header-anchor" href="#可选回调方法"><span>可选回调方法</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cs"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OnTitleChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DependencyObject</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DependencyPropertyChangedEventArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> win</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MainWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">$&quot;Title 改变: {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">OldValue</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">} → {</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">NewValue</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CoerceTitle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DependencyObject</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> baseValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 强制修正值，比如限制长度</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    string</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> baseValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> as </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IsNullOrWhiteSpace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ? </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;默认标题&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="值来源的优先级" tabindex="-1"><a class="header-anchor" href="#值来源的优先级"><span>值来源的优先级</span></a></h3><p>WPF 会根据以下 <strong>优先级</strong> 决定最终显示的值（高 → 低）：</p><ol><li><strong>动画值</strong>（如果有动画应用）</li><li><strong>本地值</strong>（直接 <code>SetValue</code> 或 XAML 属性赋值）</li><li><strong>样式触发器（Style Trigger）</strong></li><li><strong>模板触发器（Template Trigger）</strong></li><li><strong>样式 Setter</strong></li><li><strong>继承值</strong>（Property Value Inheritance）</li><li><strong>默认值</strong>（PropertyMetadata 里定义的）</li></ol><h3 id="附加属性" tabindex="-1"><a class="header-anchor" href="#附加属性"><span>附加属性</span></a></h3><p>附加属性是 <strong>定义在一个类上，但用在其他类上的依赖属性</strong>。 典型例子：<code>Grid.Row=&quot;1&quot;</code>。</p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cs"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DependencyProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> RowProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    DependencyProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RegisterAttached</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;Row&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Grid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PropertyMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SetRow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UIElement</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SetValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">RowProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GetRow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UIElement</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) =&gt; (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">RowProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由事件" tabindex="-1"><a class="header-anchor" href="#路由事件"><span>路由事件</span></a></h2><p>普通 .NET 事件（CLR Event）只会在 <strong>声明它的对象上触发</strong>， 而 <strong>路由事件</strong> 可以沿着 WPF 的 <strong>元素树</strong> 在多个元素之间传递。</p><p>这让你可以：</p><ul><li>在父控件监听子控件的事件</li><li>集中处理多个控件的事件</li><li>在控件模板中处理外部事件</li></ul><table><thead><tr><th>特性</th><th>CLR 事件</th><th>路由事件</th></tr></thead><tbody><tr><td>传播</td><td>只在当前对象</td><td>可沿元素树传播（冒泡/隧道/直接）</td></tr><tr><td>绑定位置</td><td>必须在触发对象上</td><td>可在父级统一处理</td></tr><tr><td>常见场景</td><td>普通业务逻辑</td><td>输入、鼠标、键盘、点击等 UI 事件</td></tr></tbody></table><h3 id="策略" tabindex="-1"><a class="header-anchor" href="#策略"><span>策略</span></a></h3><table><thead><tr><th>策略</th><th>传播方向</th><th>典型场景</th></tr></thead><tbody><tr><td><strong>冒泡（Bubble）</strong></td><td>从触发事件的元素 → 向上传递到根元素</td><td><code>Button.Click</code>、<code>MouseDown</code></td></tr><tr><td><strong>隧道（Tunnel）</strong></td><td>从根元素 → 向下传递到触发事件的元素</td><td>预处理事件，例如 <code>PreviewMouseDown</code></td></tr><tr><td><strong>直接（Direct）</strong></td><td>只在当前元素触发，不路由</td><td>类似 CLR 事件，例如 <code>Loaded</code></td></tr></tbody></table><p><strong>命名规律</strong></p><ul><li>冒泡事件：正常名称（如 <code>MouseDown</code>）</li><li>隧道事件：前面加 <code>Preview</code>（如 <code>PreviewMouseDown</code>）</li></ul><p><strong>路由事件传播过程</strong></p><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cs"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Window</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> └── </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">StackPanel</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      └── </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Button</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击 <code>Button</code> 时：</p><ol><li><strong>隧道事件</strong>：<code>Window.PreviewMouseDown</code> → <code>StackPanel.PreviewMouseDown</code> → <code>Button.PreviewMouseDown</code></li><li><strong>冒泡事件</strong>：<code>Button.MouseDown</code> → <code>StackPanel.MouseDown</code> → <code>Window.MouseDown</code></li></ol><h3 id="基本使用-1" tabindex="-1"><a class="header-anchor" href="#基本使用-1"><span>基本使用</span></a></h3><h4 id="定义一个路由事件" tabindex="-1"><a class="header-anchor" href="#定义一个路由事件"><span>定义一个路由事件</span></a></h4><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cs"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyControl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Button</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1. 注册路由事件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RoutedEvent</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> MyClickEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        EventManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RegisterRoutedEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;MyClick&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 事件名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            RoutingStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Bubble</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 路由策略</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RoutedEventHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 事件处理委托类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyControl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 拥有事件的类型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 2. CLR 事件包装器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> event</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RoutedEventHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MyClick</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MyClickEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RemoveHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MyClickEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3. 触发事件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OnClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OnClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        RaiseEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RoutedEventArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MyClickEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="订阅路由事件" tabindex="-1"><a class="header-anchor" href="#订阅路由事件"><span>订阅路由事件</span></a></h4><ul><li>XAML方式：</li></ul><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">local:MyControl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> MyClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MyControl_MyClick&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>代码方式：</li></ul><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cs"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">myControl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">MyControl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">MyClickEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RoutedEventHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MyControl_MyClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="事件参数-routeeventargs" tabindex="-1"><a class="header-anchor" href="#事件参数-routeeventargs"><span>事件参数（<code>RouteEventArgs</code>）</span></a></h3><ul><li><strong><code>Source</code></strong>：原始触发事件的元素（可能是子元素）</li><li><strong><code>OriginalSource</code></strong>：最底层触发的对象</li><li><strong><code>Handled</code></strong>：如果设为 <code>true</code>，事件不会继续路由</li></ul><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cs"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MyControl_MyClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> sender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RoutedEventArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">OriginalSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 打印最底层的控件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Handled</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 阻止事件继续冒泡</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="转换" tabindex="-1"><a class="header-anchor" href="#转换"><span>转换</span></a></h2><h2 id="画刷" tabindex="-1"><a class="header-anchor" href="#画刷"><span>画刷</span></a></h2><h2 id="特效" tabindex="-1"><a class="header-anchor" href="#特效"><span>特效</span></a></h2><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画"><span>动画</span></a></h2><h2 id="行为" tabindex="-1"><a class="header-anchor" href="#行为"><span>行为</span></a></h2><h2 id="页面与导航" tabindex="-1"><a class="header-anchor" href="#页面与导航"><span>页面与导航</span></a></h2>`,93)]))}const d=i(e,[["render",p]]),r=JSON.parse('{"path":"/dotnet/wpf/Component.html","title":"布局与控件","lang":"zh-CN","frontmatter":{"title":"布局与控件","shortTitle":"组件","description":"布局与控件","date":"2025-07-12T17:36:33.000Z","categories":[".NET","WPF"],"tags":[".NET"],"order":3},"git":{"createdTime":1752018223000,"updatedTime":1755581172000,"contributors":[{"name":"Okita1027","username":"Okita1027","email":"96156298+Okita1027@users.noreply.github.com","commits":9,"url":"https://github.com/Okita1027"}]},"readingTime":{"minutes":9.45,"words":2836},"filePathRelative":"dotnet/wpf/Component.md"}');export{d as comp,r as data};
